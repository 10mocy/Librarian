import async from 'async'

import express from 'express'
const router = express.Router()

import librarianConfig from '../../librarian.config'
import mysqlConfig from '../../mysql.config'

import mysql from 'mysql'
const pool = mysql.createPool(mysqlConfig)

import jwt from 'jsonwebtoken'
import crypto from 'crypto'
import { check, validationResult } from 'express-validator/check'

/**
 * „Åì„Åì„Åã„Çâ‰∏ã JWTË™çË®ºÂøÖÈ†à„Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà
 */
router.use((req, res, next) => {
  // JWT„Éà„Éº„ÇØ„É≥„ÅÆ‰ª£ÂÖ•
  const token = req.headers['x-access-token']
  if (!token) {
    return res.status(401).json({
      status: false,
      errors: {
        code: '001-0003',
        enum: 'REQUIRE_AUTHENTICATION',
        message: 'Ë™çË®º„ÅåÂøÖË¶Å„Åß„Åô„ÄÇ'
      }
    })
  }

  // JWT„Éà„Éº„ÇØ„É≥„ÅÆÊ§úË®º
  jwt.verify(token, librarianConfig.secret, (err, decoded) => {
    if (err) {
      return res.status(401).json({
        status: false,
        errors: {
          code: '001-0004',
          enum: 'INVALID_TOKEN',
          message: '„Éà„Éº„ÇØ„É≥„ÅåÁÑ°Âäπ„Åß„Åô„ÄÇ'
        }
      })
    }

    // Ê§úË®º„Å´ÊàêÂäü„Åó„Åü„Çâ„Åì„Åì‰ª•‰∏ã„ÅÆÂá¶ÁêÜ„Åß‰ΩøÁî®„Åß„Åç„Çã„Çà„ÅÜ„Å´„Åô„Çã
    req.token = decoded
    next()
  })
})

// [üîíGET] ËîµÊõ∏„É™„Çπ„Éà„ÇíÂèñÂæó„Åô„Çã
router.get('/', (req, res) => {
  // res.json({
  //   status: true,
  //   message: 'Hello world!'
  // })

  pool.getConnection((err, connection) => {
    let books = []
    // „É¶„Éº„Ç∂„Éè„ÉÉ„Ç∑„É•„Åã„ÇâËîµÊõ∏„Éá„Éº„Çø„ÇíÂèñÂæó
    connection.query(
      'SELECT * FROM books WHERE ? AND isDelete = 0 ORDER BY id DESC',
      {
        userHash: req.token['work.neirowork.librarian.userHash']
      },
      (err, result, fields) => {
        // ËøîÂç¥„Éá„Éº„Çø„ÅÆ‰ΩúÊàê
        async.each(
          result,
          (i, callback) => {
            books.push({
              hash: i.hash,
              title: i.title,
              volume: i.volume,
              isDoujin: i.isDoujin,
              remarks: i.remarks,
              timestamp: i.timestamp
            })
            callback()
          },
          err => {
            // ËøîÂç¥
            return res.json({
              status: true,
              books
            })
          }
        )
      }
    )
    connection.release()
  })
})

// [üîíPOST] ËîµÊõ∏„ÇíÊ§úÁ¥¢„Åô„Çã
router.post('/search', [check('query').isString()], (req, res) => {
  const validationErrors = validationResult(req)
  if (validationErrors.array().length !== 0) {
    return res
      .status(422)
      .json({ status: false, errors: validationErrors.array() })
  }

  pool.getConnection((err, connection) => {
    // Ê§úÁ¥¢„ÇØ„Ç®„É™„Åß„Çø„Ç§„Éà„É´„Å®ÂÇôËÄÉ„ÇíÊ§úÁ¥¢„Åô„Çã„ÄÇ(ÂâäÈô§Ê∏à„Åø„ÅØÁÑ°Ë¶ñ)
    connection.query(
      'SELECT * FROM books WHERE ( title LIKE ? OR remarks LIKE ? ) AND userHash = ? AND isDelete = 0 ORDER BY id DESC',
      [
        `%${req.body.query}%`,
        `%${req.body.query}%`,
        req.token['work.neirowork.librarian.userHash']
      ],
      (err, results) => {
        // ËøîÂç¥„Éá„Éº„Çø„ÅÆ‰ΩúÊàê
        let books = []
        async.each(
          results,
          (i, callback) => {
            books.push({
              hash: i.hash,
              title: i.title,
              volume: i.volume,
              isDoujin: i.isDoujin,
              remarks: i.remarks,
              timestamp: i.timestamp
            })
            callback()
          },
          err => {
            // ËøîÂç¥
            return res.json({
              status: true,
              books
            })
          }
        )
      }
    )
    connection.release()
  })
})

// [üîíPOST] ËîµÊõ∏„ÇíÁôªÈå≤„Åô„Çã
router.post(
  '/',
  [
    check('title')
      .isString()
      .not()
      .isEmpty(),
    check('volume')
      .isString()
      .not()
      .isEmpty(),
    check('isDoujin')
      .isInt()
      .not()
      .isEmpty(),
    check('remarks').isString()
  ],
  (req, res) => {
    const validationErrors = validationResult(req)
    console.log(validationErrors.array())
    if (validationErrors.array().length !== 0) {
      return res
        .status(422)
        .json({ status: false, errors: validationErrors.array() })
    }

    const date = new Date()

    pool.getConnection((err, connection) => {
      // ËîµÊõ∏„ÅÆÁôªÈå≤
      connection.query(
        'INSERT INTO books SET ?',
        {
          title: req.body.title,
          volume: req.body.volume,
          isDoujin: req.body.isDoujin,
          remarks: req.body.remarks,
          userHash: req.token['work.neirowork.librarian.userHash'],
          timestamp: Math.floor(date.getTime() / 1000)
        },
        (err, results) => {
          // ËîµÊõ∏ID„ÅÆ‰ª£ÂÖ•
          const bookId = results.insertId

          // ËîµÊõ∏ID„Åã„Çâ„ÉÄ„Ç§„Ç∏„Çß„Çπ„ÉàÂÄ§„Çí‰ΩúÊàê
          const hash = crypto
            .createHash('sha256')
            .update(String(bookId))
            .digest('hex')

          // ËîµÊõ∏„Éè„ÉÉ„Ç∑„É•ÂÄ§„ÇíÈÅ©Áî®
          connection.query(
            'UPDATE books SET hash = ? WHERE id = ?',
            [hash, bookId],
            (err, results) => {
              // ËîµÊõ∏„ÅÆÊúÄÁµÇÁöÑ„Å™ÊÉÖÂ†±„ÇíÂèñÂæó
              connection.query(
                'SELECT * FROM books WHERE ? LIMIT 1',
                {
                  id: bookId
                },
                (err, results) => {
                  // ÁôªÈå≤ÊÉÖÂ†±„Çí„É¨„Çπ„Éù„É≥„Çπ
                  const data = results[0]
                  return res.json({
                    status: true,
                    hash: data.hash,
                    title: data.title,
                    volume: data.volume,
                    remarks: data.remarks,
                    timestamp: data.timestamp
                  })
                }
              )
            }
          )
        }
      )
      connection.release()
    })
  }
)

// [üîíGET] ËîµÊõ∏ÊÉÖÂ†±„ÇíÂèñÂæó„Åô„Çã
router.get('/:bookHash', [check('bookHash').isString()], (req, res) => {
  const validationErrors = validationResult(req)
  if (validationErrors.array().length !== 0) {
    return res
      .status(422)
      .json({ status: false, errors: validationErrors.array() })
  }

  pool.getConnection((err, connection) => {
    connection.query(
      'SELECT * FROM books WHERE hash = ? AND isDelete = 0 AND userHash = ?',
      [req.params.bookHash, req.token['work.neirowork.librarian.userHash']],
      (err, results) => {
        if (results.length === 0) {
          return res.status(404).json({
            status: false,
            errors: {
              code: '002-0001',
              enum: 'BOOK_NOT_FOUND',
              message: 'ÊåáÂÆö„Åï„Çå„ÅüËîµÊõ∏„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„ÄÇ'
            }
          })
        } else {
          const book = results[0]
          return res.json({
            status: true,
            book: {
              title: book.title,
              volume: book.volume,
              isDoujin: book.isDoujin,
              remarks: book.remarks,
              timestamp: book.timestamp
            }
          })
        }
      }
    )
    connection.release()
  })
})

// [üîíDELETE] ËîµÊõ∏„ÇíÂâäÈô§„Åô„Çã
router.delete('/:bookHash', [check('bookHash').isString()], (req, res) => {
  const validationErrors = validationResult(req)
  if (validationErrors.array().length !== 0) {
    return res
      .status(422)
      .json({ status: false, errors: validationErrors.array() })
  }

  const bookHash = req.params.bookHash

  pool.getConnection((err, connection) => {
    // ËîµÊõ∏„Éá„Éº„Çø„ÅÆÁ¢∫Ë™ç
    connection.query(
      'SELECT * FROM books WHERE ? AND isDelete = 0',
      {
        hash: bookHash
      },
      (err, results) => {
        // ËîµÊõ∏„ÅåË¶ã„Å§„Åã„Çâ„Å™„Åã„Å£„Åü„Å®„Åç
        if (results.length === 0) {
          return res.status(404).json({
            status: false,
            errors: {
              code: '002-0001',
              enum: 'BOOK_NOT_FOUND',
              message: 'ÊåáÂÆö„Åï„Çå„ÅüËîµÊõ∏„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„ÄÇ'
            }
          })
        } else {
          // ÂâäÈô§„Éï„É©„Ç∞„ÇíÁ´ã„Å¶„Çã
          connection.query(
            'UPDATE books SET isDelete = 1 WHERE ?',
            {
              hash: bookHash
            },
            (err, results) => {
              // „É¨„Çπ„Éù„É≥„Çπ
              return res.json({
                status: true,
                hash: bookHash
              })
            }
          )
        }
      }
    )
    connection.release()
  })
})

export default router
